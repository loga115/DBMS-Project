import cx_Oracle
from datetime import datetime

# Connect to Oracle database
dsn_tns = cx_Oracle.makedsn("TUF_GAMING", "1521", service_name="XE")
db = cx_Oracle.connect(
    user=r"system", password="password", dsn=dsn_tns
)
cursor = db.cursor()


'''
Main SQL code:
DROP TABLE Parking_slot CASCADE CONSTRAINTS;
DROP TABLE Vehicle;
DROP TABLE Parking_fee;
DROP TABLE Parking_duration;

COMMIT;



CREATE TABLE IF NOT EXISTS Parking_slot (
SlotNo INT NOT NULL PRIMARY KEY,
SlotType VARCHAR(10),
SlotArea VARCHAR(10),
SlotNotes VARCHAR(100),
SlotFree NUMBER(1) DEFAULT 1 NOT NULL
);

CREATE TABLE Vehicle (
OwnerName VARCHAR(20),
OwnerPhone VARCHAR(15),
LicensePlate VARCHAR(12) PRIMARY KEY NOT NULL,
VehicleName VARCHAR(40),
VehicleCompany VARCHAR(30),
VehicleType VARCHAR(15),
VehicleDesc VARCHAR(100)
);

CREATE TABLE Parking_duration (
DurationTime TIMESTAMP NOT NULL,
DurationType VARCHAR(10),
DurationDesc VARCHAR(50),
ParkingID INT PRIMARY KEY,
LicensePlate VARCHAR(12) REFERENCES Vehicle(LicensePlate),
SlotNo INT REFERENCES Parking_slot(SlotNo)
);


CREATE TABLE Parking_fee (
ParkingID INT REFERENCES Parking_duration(ParkingID),
FeeID INT NOT NULL PRIMARY KEY,
FeeAmt INT NOT NULL,
FeeType VARCHAR(10),
FeeNotes VARCHAR(50)
);

create sequence parkingid_seq;
create or replace trigger trg_emp_id
    before insert on Parking_duration
    for each row
    begin
      select parkingid_seq.nextval
        into :new.parkingid
        from dual;
    end;
/

create sequence feeid_seq;
create or replace trigger trg_fee_id
    before insert on Parking_fee
    for each row
    begin
      select feeid_seq.nextval
        into :new.feeID
        from dual;
    end;
/

--MODIFY ParkingDuration to round off floats, without losing data
-- Add a new column with the desired data type
ALTER TABLE Parking_duration ADD New_DurationTime TIMESTAMP(0);
-- Update the new column with the values from the existing column
UPDATE Parking_duration SET New_DurationTime = DurationTime;
-- Drop the existing column
ALTER TABLE Parking_duration DROP COLUMN DurationTime;
-- Rename the new column to the original column name
ALTER TABLE Parking_duration RENAME COLUMN New_DurationTime TO DurationTime;

--TO:
--Create a parking system database. ==> Done
--Have parking id be autogenerated. ==> Done
--Keep track of vehicle data on parking. 
--Somehow modify it so that fee auto-updates whenever a car leaves, generate it then based on the timestamp created during the parking duration.
--Have a table for parking fee, and parking duration. ==> Done
--Based on the already existing table structure, modify all of it for now, and create triggers and stuff to implement this. 

--add some parking slots
INSERT INTO Parking_slot (SlotNo, SlotType, SlotArea, SlotNotes, SlotFree) VALUES (1, 'Car', 'Front', 'Front parking slot', 1);
INSERT INTO Parking_slot (SlotNo, SlotType, SlotArea, SlotNotes, SlotFree) VALUES (2, 'Car', 'Front', 'Front parking slot', 1);
INSERT INTO Parking_slot (SlotNo, SlotType, SlotArea, SlotNotes, SlotFree) VALUES (3, 'Car', 'Front', 'Front parking slot', 1);
INSERT INTO Parking_slot (SlotNo, SlotType, SlotArea, SlotNotes, SlotFree) VALUES (4, 'Car', 'Front', 'Front parking slot', 1);
INSERT INTO Parking_slot (SlotNo, SlotType, SlotArea, SlotNotes, SlotFree) VALUES (5, 'Car', 'Front', 'Front parking slot', 1);

-- Create a procedure for parking a vehicle into the parking system
CREATE OR REPLACE PROCEDURE ParkVehicle(
    p_OwnerName IN Vehicle.OwnerName%TYPE,
    p_OwnerPhone IN Vehicle.OwnerPhone%TYPE,
    p_LicensePlate IN Vehicle.LicensePlate%TYPE,
    p_VehicleName IN Vehicle.VehicleName%TYPE,
    p_VehicleCompany IN Vehicle.VehicleCompany%TYPE,
    p_VehicleType IN Vehicle.VehicleType%TYPE,
    p_VehicleDesc IN Vehicle.VehicleDesc%TYPE
)
IS
    v_SlotNo Parking_slot.SlotNo%TYPE;
    v_ParkingID Parking_duration.ParkingID%TYPE;
BEGIN
    -- Check for an open parking slot
    SELECT SlotNo INTO v_SlotNo
    FROM Parking_slot
    WHERE SlotFree = 1
    AND ROWNUM = 1;
    
    -- If no open parking slot, raise an error
    IF v_SlotNo IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Parking system is full');
    END IF;

    -- Insert or update vehicle information
    MERGE INTO Vehicle v
    USING (SELECT p_LicensePlate AS LicensePlate FROM dual) d
    ON (v.LicensePlate = d.LicensePlate)
    WHEN NOT MATCHED THEN
        INSERT (OwnerName, OwnerPhone, LicensePlate, VehicleName, VehicleCompany, VehicleType, VehicleDesc)
        VALUES (p_OwnerName, p_OwnerPhone, p_LicensePlate, p_VehicleName, p_VehicleCompany, p_VehicleType, p_VehicleDesc);
    
    -- Insert into parking_duration
    INSERT INTO Parking_duration (DurationTime, DurationType, DurationDesc, ParkingID, LicensePlate, SlotNo)
    VALUES (SYSTIMESTAMP, 'Regular', 'Regular parking duration', v_ParkingID, p_LicensePlate, v_SlotNo);
    
    -- Retrieve the generated ParkingID
    SELECT parkingid_seq.currval INTO v_ParkingID FROM dual;
    
    -- Insert into parking_fee
    INSERT INTO Parking_fee (ParkingID, FeeAmt, FeeType, FeeNotes)
    VALUES (v_ParkingID, 0, 'Regular', 'Regular parking fee');
    
    -- Update slot status
    UPDATE Parking_slot
    SET SlotFree = 0
    WHERE SlotNo = v_SlotNo;
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Vehicle parked successfully');
    DBMS_OUTPUT.PUT_LINE('Parking ID: ' || v_ParkingID);
    DBMS_OUTPUT.PUT_LINE('Slot number: ' || v_SlotNo);


EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Parking system is full');
    
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

set serveroutput on;
--CHECK PROC
-- Test parking a vehicle
BEGIN 
    ParkVehicle('John Doe', '1234567890', 'TN05HH1131', 'Toyota Corolla', 'Toyota', 'Car', 'Blue');
END;
/



-- Create a trigger for parking_fee when parking_duration is added -- NOT NEEDED
DROP TRIGGER trg_PKGDN_fee;


CREATE OR REPLACE PROCEDURE PV_LP(
    p_LicensePlate IN Vehicle.LicensePlate%TYPE
)
IS
    v_SlotNo Parking_slot.SlotNo%TYPE;
    v_ParkingID Parking_duration.ParkingID%TYPE;
BEGIN
    -- Check for an open parking slot
    SELECT SlotNo INTO v_SlotNo
    FROM Parking_slot
    WHERE SlotFree = 1
    AND ROWNUM = 1;
    
    -- If no open parking slot, raise an error
    IF v_SlotNo IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Parking system is full');
    END IF;

    -- Insert or update vehicle information
    MERGE INTO Vehicle v
    USING (SELECT p_LicensePlate AS LicensePlate FROM dual) d
    ON (v.LicensePlate = d.LicensePlate)
    WHEN NOT MATCHED THEN
        INSERT (OwnerName, OwnerPhone, LicensePlate, VehicleName, VehicleCompany, VehicleType, VehicleDesc)
        VALUES (NULL, NULL, p_LicensePlate, NULL, NULL, NULL, NULL);
    
    -- Insert into parking_duration
    INSERT INTO Parking_duration (DurationTime, DurationType, DurationDesc, ParkingID, LicensePlate, SlotNo)
    VALUES (SYSTIMESTAMP, 'Regular', 'Regular parking duration', v_ParkingID, p_LicensePlate, v_SlotNo);
    
    -- Retrieve the generated ParkingID
    SELECT parkingid_seq.currval INTO v_ParkingID FROM dual;
    
    -- Insert into parking_fee
    INSERT INTO Parking_fee (ParkingID, FeeAmt, FeeType, FeeNotes)
    VALUES (v_ParkingID, 0, 'Regular', 'Regular parking fee');
    
    -- Update slot status
    UPDATE Parking_slot
    SET SlotFree = 0
    WHERE SlotNo = v_SlotNo;
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Vehicle parked successfully');
    DBMS_OUTPUT.PUT_LINE('Parking ID: ' || v_ParkingID);
    DBMS_OUTPUT.PUT_LINE('Slot number: ' || v_SlotNo);


EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Parking system is full');
    
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- Test parking a vehicle
BEGIN 
    PV_LP('TN05HH1131');
END;
/

SELECT * FROM Vehicle WHERE LicensePlate = 'TN05HH1131';

CREATE OR REPLACE PROCEDURE PV_ON_LP(
    p_LicensePlate IN Vehicle.LicensePlate%TYPE,
    p_OwnerName IN Vehicle.OwnerName%TYPE,
    p_ParkingID OUT Parking_duration.ParkingID%TYPE
)
IS
    v_SlotNo Parking_slot.SlotNo%TYPE;
    v_ParkingID Parking_duration.ParkingID%TYPE;
BEGIN
    -- Check for an open parking slot
    SELECT SlotNo INTO v_SlotNo
    FROM Parking_slot
    WHERE SlotFree = 1
    AND ROWNUM = 1;
    
    -- If no open parking slot, raise an error
    IF v_SlotNo IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Parking system is full');
    END IF;

    -- Insert or update vehicle information
    MERGE INTO Vehicle v
    USING (SELECT p_LicensePlate AS LicensePlate FROM dual) d
    ON (v.LicensePlate = d.LicensePlate)
    WHEN NOT MATCHED THEN
        INSERT (OwnerName, OwnerPhone, LicensePlate, VehicleName, VehicleCompany, VehicleType, VehicleDesc)
        VALUES (p_OwnerName, NULL, p_LicensePlate, NULL, NULL, NULL, NULL);
    
    -- Insert into parking_duration
    INSERT INTO Parking_duration (DurationTime, DurationType, DurationDesc, ParkingID, LicensePlate, SlotNo)
    VALUES (SYSTIMESTAMP, 'Regular', 'Regular parking duration', v_ParkingID, p_LicensePlate, v_SlotNo);
    
    -- Retrieve the generated ParkingID
    SELECT parkingid_seq.currval INTO v_ParkingID FROM dual;
    
    -- Insert into parking_fee
    INSERT INTO Parking_fee (ParkingID, FeeAmt, FeeType, FeeNotes)
    VALUES (v_ParkingID, 0, 'Regular', 'Regular parking fee');
    
    -- Update slot status
    UPDATE Parking_slot
    SET SlotFree = 0
    WHERE SlotNo = v_SlotNo;
    
    p_ParkingID := v_ParkingID; -- return the parking ID

    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Vehicle parked successfully');
    DBMS_OUTPUT.PUT_LINE('Parking ID: ' || v_ParkingID);
    DBMS_OUTPUT.PUT_LINE('Slot number: ' || v_SlotNo);


EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Parking system is full');
    
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- Test parking a vehicle
BEGIN 
    PV_ON_LP('TN05HH1131', 'John Doe');
END;


-- Create a procedure to request the fee amount using parkingID

-- Test everything by adding a vehicle in, license plate 'TN01AB1234'
BEGIN
    ParkVehicle('John Doe', '1234567890', 'TN01AB1234', 'Toyota Corolla', 'Toyota', 'Car', 'Blue');
END;

-- Check the parking fee for the vehicle using parkingID
DECLARE
    v_FeeAmt Parking_fee.FeeAmt%TYPE;
BEGIN
    GetParkingFee(1, v_FeeAmt);
    DBMS_OUTPUT.PUT_LINE('Parking fee: ' || v_FeeAmt);
END;




--create procedure to remove a vehicle, and generate its fee amount. use parkingID
CREATE OR REPLACE PROCEDURE RemoveVehicle(
    p_ParkingID IN Parking_duration.ParkingID%TYPE,
    p_FeeAmt OUT Parking_fee.FeeAmt%TYPE
)
IS
BEGIN
    -- Get the parking fee
    SELECT FeeAmt INTO p_FeeAmt FROM Parking_fee WHERE ParkingID = p_ParkingID or FeeID = p_ParkingID;

    
    -- Update the parking fee based on the parking duration, in the table as well
    UPDATE Parking_fee
    SET FeeAmt = (SELECT EXTRACT(HOUR FROM (SYSTIMESTAMP - DurationTime)) * 10 FROM Parking_duration WHERE ParkingID = p_ParkingID)
    WHERE ParkingID = p_ParkingID;

    
    -- Update the slot status
    UPDATE Parking_slot
    SET SlotFree = 1
    WHERE SlotNo = (SELECT SlotNo FROM Parking_duration WHERE ParkingID = p_ParkingID);
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Vehicle removed successfully');
    DBMS_OUTPUT.PUT_LINE('Parking fee: ' || p_FeeAmt);

END;
/

-- test removing 
BEGIN
    DECLARE
        p_FeeAmt Parking_fee.FeeAmt%TYPE;
    BEGIN
        RemoveVehicle(2, p_FeeAmt);
        DBMS_OUTPUT.PUT_LINE('Fee amount: ' || p_FeeAmt);
    END;
END;

-- find difference in hours between 21/04/2024 12:00:00 PM and current time
SELECT EXTRACT(DAY FROM (SYSTIMESTAMP - TO_TIMESTAMP('21/04/2024 12:00:00 PM', 'DD/MM/YYYY HH:MI:SS AM'))) * 24 + EXTRACT(HOUR FROM (SYSTIMESTAMP - TO_TIMESTAMP('21/04/2024 12:00:00 PM', 'DD/MM/YYYY HH:MI:SS AM'))) FROM dual;
-- DEBUG: use previous query above this to find the difference in hours between durationTime timestamp and current system date
SELECT (EXTRACT(DAY FROM (SYSTIMESTAMP - DurationTime)) * 24 + EXTRACT(HOUR FROM (SYSTIMESTAMP - DurationTime)))*50 AS ParkingFee FROM Parking_duration WHERE parkingid = 1;
-- Create a procedure to remove a vehicle, and generate its fee amount using parkingID


CREATE OR REPLACE PROCEDURE RemoveVehicle(
    p_ParkingID IN Parking_duration.ParkingID%TYPE,
    p_FeeAmt OUT Parking_fee.FeeAmt%TYPE
)
IS
BEGIN
    -- Get the parking fee
    SELECT (EXTRACT(DAY FROM (SYSTIMESTAMP - DurationTime)) * 24 + EXTRACT(HOUR FROM (SYSTIMESTAMP - DurationTime))) * 50
    INTO p_FeeAmt
    FROM Parking_duration
    WHERE ParkingID = p_ParkingID;

    -- Update the parking fee in the table as well
    UPDATE Parking_fee
    SET FeeAmt = p_FeeAmt
    WHERE ParkingID = p_ParkingID;

    -- Update the slot status
    UPDATE Parking_slot
    SET SlotFree = 1
    WHERE SlotNo = (SELECT SlotNo FROM Parking_duration WHERE ParkingID = p_ParkingID);

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Vehicle removed successfully');
    DBMS_OUTPUT.PUT_LINE('Parking fee: ' || p_FeeAmt);

END;
/

-- Test removing a vehicle
BEGIN
    DECLARE
        p_FeeAmt Parking_fee.FeeAmt%TYPE;
    BEGIN
        RemoveVehicle(1, p_FeeAmt);
        DBMS_OUTPUT.PUT_LINE('Fee amount: ' || p_FeeAmt);
    END;
END;

CREATE OR REPLACE PROCEDURE ViewFee (
    p_ParkingID IN Parking_duration.ParkingID%TYPE,
    p_FeeAmt OUT Parking_fee.FeeAmt%TYPE
)
IS
    v_FeeAmt Parking_fee.FeeAmt%TYPE;
BEGIN
    SELECT (EXTRACT(DAY FROM (SYSTIMESTAMP - DurationTime)) * 24 + EXTRACT(HOUR FROM (SYSTIMESTAMP - DurationTime))) * 50
    INTO v_FeeAmt
    FROM Parking_duration
    WHERE ParkingID = p_ParkingID;

    --update fee table
    UPDATE Parking_fee
    SET FeeAmt = v_FeeAmt
    WHERE ParkingID = p_ParkingID;

    --return fee amount
    SELECT FeeAmt INTO p_FeeAmt FROM Parking_fee WHERE ParkingID = p_ParkingID;
END;
/


-- Test viewing the parking fee
BEGIN
    DECLARE
        p_FeeAmt Parking_fee.FeeAmt%TYPE;
    BEGIN
        ViewFee(1, p_FeeAmt);
        DBMS_OUTPUT.PUT_LINE('Fee amount: ' || p_FeeAmt);
    END;
END;
/



--DEBUG SECTION
--wipe parking duration clean of all parkings today and open all slots
-- Delete child records from Parking_fee table first
DELETE FROM Parking_fee WHERE ParkingID IN (SELECT ParkingID FROM Parking_duration WHERE EXTRACT(DAY FROM DurationTime) = EXTRACT(DAY FROM SYSTIMESTAMP));
-- Delete parent records from Parking_duration table
DELETE FROM Parking_duration WHERE EXTRACT(DAY FROM DurationTime) = EXTRACT(DAY FROM SYSTIMESTAMP);
-- Update all parking slots to be free
UPDATE Parking_slot SET SlotFree = 1;
'''

# Test procedures
cursor.execute("""
    SELECT * FROM Parking_Slot
""")
print(cursor.fetchall())

cursor.execute("""
    SELECT * FROM Vehicle
""")
print(cursor.fetchall())

cursor.execute("""
    SELECT * FROM Parking_Duration
""")

cursor.execute('''begin
    PV_LP('TN01AB1234');
end;''')

#test parking vehicle with license plate TN01AB1234 using PV_LP procedure and verify
cursor.execute("""
    SELECT LicensePlate FROM Parking_Duration
""")
print(cursor.fetchall())
cursor.callproc('PV_LP', ['TN05HH1642'])

cursor.execute("""
    SELECT LicensePlate FROM Parking_Duration
""")
print(cursor.fetchall())

#test parking vehicle with license plate TN06AH1622, owner name John Doe using PV_ON_LP procedure and verify if all tables are updated, vehicle table should have owner name John Doe
parking_id = cursor.var(int)
cursor.callproc('PV_ON_LP', ['TN06AH1622', 'John Doe', parking_id])
print("Parking ID:", parking_id.getvalue())
cursor.execute("""
    SELECT * FROM Vehicle
    WHERE LicensePlate = 'TN06AH1622'
""")
print(cursor.fetchall())


# Unpark a vehicle
out_val = cursor.var(int)
cursor.callproc('RemoveVehicle', [1, out_val])
print("Fee:", out_val.getvalue())

# Get updated fee
parking_id = 2
fee = cursor.var(int)
cursor.callproc("ViewFee", [parking_id, fee])
print("Fee:", fee.getvalue())

db.commit()

# Close connection
cursor.close()
db.close()
